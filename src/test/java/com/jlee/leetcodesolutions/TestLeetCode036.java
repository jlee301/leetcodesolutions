package com.jlee.leetcodesolutions;

import com.jlee.leetcodesolutions.LeetCode036;
import org.junit.Assert;
import org.junit.Test;

public class TestLeetCode036 {
  @Test
  public void testValidFullBoard() {
    char[][] board = {{'4','6','3', '7','2','8', '9','5','1'},
                      {'2','5','9', '4','6','1', '7','3','8'},
                      {'7','8','1', '3','5','9', '6','4','2'},
                      
                      {'5','3','2', '1','9','7', '4','8','6'},
                      {'9','1','4', '6','8','2', '5','7','3'},
                      {'6','7','8', '5','4','3', '1','2','9'},
                      
                      {'8','2','6', '9','7','5', '3','1','4'},
                      {'1','4','7', '2','3','6', '8','9','5'},
                      {'3','9','5', '8','1','4', '2','6','7'}};
    LeetCode036 solution = new LeetCode036();
    Assert.assertTrue(solution.isValidSudoku(board));
  }
  
  @Test
  public void testDupeInGrid0() {
    char[][] board = {{'4','6','3', '.','.','.', '.','.','.'},
                      {'2','3','9', '.','.','.', '.','.','.'},
                      {'7','8','1', '.','.','.', '.','.','.'},
        
                      {'.','.','.', '.','.','.', '.','.','.'},
                      {'.','.','.', '.','.','.', '.','.','.'},
                      {'.','.','.', '.','.','.', '.','.','.'},
        
                      {'.','.','.', '.','.','.', '.','.','.'},
                      {'.','.','.', '.','.','.', '.','.','.'},
                      {'.','.','.', '.','.','.', '.','.','.'}};
    LeetCode036 solution = new LeetCode036();
    Assert.assertFalse(solution.isValidSudoku(board));
  }
  
  @Test
  public void testDupeInGrid1() {
    char[][] board = {{'.','.','.', '4','6','3', '.','.','.'},
                      {'.','.','.', '2','3','9', '.','.','.'},
                      {'.','.','.', '7','8','1', '.','.','.'},
        
                      {'.','.','.', '.','.','.', '.','.','.'},
                      {'.','.','.', '.','.','.', '.','.','.'},
                      {'.','.','.', '.','.','.', '.','.','.'},
        
                      {'.','.','.', '.','.','.', '.','.','.'},
                      {'.','.','.', '.','.','.', '.','.','.'},
                      {'.','.','.', '.','.','.', '.','.','.'}};
    LeetCode036 solution = new LeetCode036();
    Assert.assertFalse(solution.isValidSudoku(board));
  }
  
  @Test
  public void testDupeInGrid2() {
    char[][] board = {{'.','.','.', '.','.','.', '4','6','3'},
                      {'.','.','.', '.','.','.', '2','3','9'},
                      {'.','.','.', '.','.','.', '7','8','1'},
        
                      {'.','.','.', '.','.','.', '.','.','.'},
                      {'.','.','.', '.','.','.', '.','.','.'},
                      {'.','.','.', '.','.','.', '.','.','.'},
        
                      {'.','.','.', '.','.','.', '.','.','.'},
                      {'.','.','.', '.','.','.', '.','.','.'},
                      {'.','.','.', '.','.','.', '.','.','.'}};
    LeetCode036 solution = new LeetCode036();
    Assert.assertFalse(solution.isValidSudoku(board));
  }
  
  @Test
  public void testDupeInGrid3() {
    char[][] board = {{'.','.','.', '.','.','.', '.','.','.'},
                      {'.','.','.', '.','.','.', '.','.','.'},
                      {'.','.','.', '.','.','.', '.','.','.'},
        
                      {'4','6','3', '.','.','.', '.','.','.'},
                      {'2','3','9', '.','.','.', '.','.','.'},
                      {'7','8','1', '.','.','.', '.','.','.'},
        
                      {'.','.','.', '.','.','.', '.','.','.'},
                      {'.','.','.', '.','.','.', '.','.','.'},
                      {'.','.','.', '.','.','.', '.','.','.'}};
    LeetCode036 solution = new LeetCode036();
    Assert.assertFalse(solution.isValidSudoku(board));
  }
  
  @Test
  public void testDupeInGrid4() {
    char[][] board = {{'.','.','.', '.','.','.', '.','.','.'},
                      {'.','.','.', '.','.','.', '.','.','.'},
                      {'.','.','.', '.','.','.', '.','.','.'},
        
                      {'.','.','.', '4','6','3', '.','.','.'},
                      {'.','.','.', '2','3','9', '.','.','.'},
                      {'.','.','.', '7','8','1', '.','.','.'},
        
                      {'.','.','.', '.','.','.', '.','.','.'},
                      {'.','.','.', '.','.','.', '.','.','.'},
                      {'.','.','.', '.','.','.', '.','.','.'}};
    LeetCode036 solution = new LeetCode036();
    Assert.assertFalse(solution.isValidSudoku(board));
  }
  
  @Test
  public void testDupeInGrid5() {
    char[][] board = {{'.','.','.', '.','.','.', '.','.','.'},
                      {'.','.','.', '.','.','.', '.','.','.'},
                      {'.','.','.', '.','.','.', '.','.','.'},
        
                      {'.','.','.', '.','.','.', '4','6','3'},
                      {'.','.','.', '.','.','.', '2','3','9'},
                      {'.','.','.', '.','.','.', '7','8','1'},
        
                      {'.','.','.', '.','.','.', '.','.','.'},
                      {'.','.','.', '.','.','.', '.','.','.'},
                      {'.','.','.', '.','.','.', '.','.','.'}};
    LeetCode036 solution = new LeetCode036();
    Assert.assertFalse(solution.isValidSudoku(board));
  }
  
  @Test
  public void testDupeInGrid6() {
    char[][] board = {{'.','.','.', '.','.','.', '.','.','.'},
                      {'.','.','.', '.','.','.', '.','.','.'},
                      {'.','.','.', '.','.','.', '.','.','.'},
        
                      {'.','.','.', '.','.','.', '.','.','.'},
                      {'.','.','.', '.','.','.', '.','.','.'},
                      {'.','.','.', '.','.','.', '.','.','.'},
        
                      {'4','6','3', '.','.','.', '.','.','.'},
                      {'2','3','9', '.','.','.', '.','.','.'},
                      {'7','8','1', '.','.','.', '.','.','.'}};
    LeetCode036 solution = new LeetCode036();
    Assert.assertFalse(solution.isValidSudoku(board));
  }
  
  @Test
  public void testDupeInGrid7() {
    char[][] board = {{'.','.','.', '.','.','.', '.','.','.'},
                      {'.','.','.', '.','.','.', '.','.','.'},
                      {'.','.','.', '.','.','.', '.','.','.'},
        
                      {'.','.','.', '.','.','.', '.','.','.'},
                      {'.','.','.', '.','.','.', '.','.','.'},
                      {'.','.','.', '.','.','.', '.','.','.'},
        
                      {'.','.','.', '4','6','3', '.','.','.'},
                      {'.','.','.', '2','3','9', '.','.','.'},
                      {'.','.','.', '7','8','1', '.','.','.'}};
    LeetCode036 solution = new LeetCode036();
    Assert.assertFalse(solution.isValidSudoku(board));
  }
  
  @Test
  public void testDupeInGrid8() {
    char[][] board = {{'.','.','.', '.','.','.', '.','.','.'},
                      {'.','.','.', '.','.','.', '.','.','.'},
                      {'.','.','.', '.','.','.', '.','.','.'},
        
                      {'.','.','.', '.','.','.', '.','.','.'},
                      {'.','.','.', '.','.','.', '.','.','.'},
                      {'.','.','.', '.','.','.', '.','.','.'},
        
                      {'.','.','.', '.','.','.', '4','6','3'},
                      {'.','.','.', '.','.','.', '2','3','9'},
                      {'.','.','.', '.','.','.', '7','8','1'}};
    LeetCode036 solution = new LeetCode036();
    Assert.assertFalse(solution.isValidSudoku(board));
  }
  
  @Test
  public void testRowHasDupes() {
    char[][] board = {{'1','2','3', '4','4','.', '.','.','.'},
                      {'.','.','.', '.','.','.', '.','.','.'},
                      {'.','.','.', '.','.','.', '.','.','.'},
                      
                      {'.','.','.', '.','.','.', '.','.','.'},
                      {'.','.','.', '.','.','.', '.','.','.'},
                      {'.','.','.', '.','.','.', '.','.','.'},
                      
                      {'.','.','.', '.','.','.', '.','.','.'},
                      {'.','.','.', '.','.','.', '.','.','.'},
                      {'.','.','.', '.','.','.', '.','.','.'}};
    LeetCode036 solution = new LeetCode036();
    Assert.assertFalse(solution.isValidSudoku(board));
  }

  @Test
  public void testColHasDupes() {
    char[][] board = {{'1','.','.', '.','.','.', '.','.','.'},
                      {'2','.','.', '.','.','.', '.','.','.'},
                      {'3','.','.', '.','.','.', '.','.','.'},
                      
                      {'4','.','.', '.','.','.', '.','.','.'},
                      {'4','.','.', '.','.','.', '.','.','.'},
                      {'.','.','.', '.','.','.', '.','.','.'},
                      
                      {'.','.','.', '.','.','.', '.','.','.'},
                      {'.','.','.', '.','.','.', '.','.','.'},
                      {'.','.','.', '.','.','.', '.','.','.'}};
    LeetCode036 solution = new LeetCode036();
    Assert.assertFalse(solution.isValidSudoku(board));
  }

  @Test
  public void testEmptyCol() {
    char[][] board = {};
    LeetCode036 solution = new LeetCode036();
    Assert.assertFalse(solution.isValidSudoku(board));
  }

  @Test
  public void testEmptyRow() {
    char[][] board = {{}};
    LeetCode036 solution = new LeetCode036();
    Assert.assertFalse(solution.isValidSudoku(board));
  }

  @Test
  public void test10Col() {
    char[][] board = {{'.','.','.', '.','.','.', '.','.','.','.'},
                      {'.','.','.', '.','.','.', '.','.','.','.'},
                      {'.','.','.', '.','.','.', '.','.','.','.'},
                      
                      {'.','.','.', '.','.','.', '.','.','.','.'},
                      {'.','.','.', '.','.','.', '.','.','.','.'},
                      {'.','.','.', '.','.','.', '.','.','.','.'},
                      
                      {'.','.','.', '.','.','.', '.','.','.','.'},
                      {'.','.','.', '.','.','.', '.','.','.','.'},
                      {'.','.','.', '.','.','.', '.','.','.','.'}};
    LeetCode036 solution = new LeetCode036();
    Assert.assertFalse(solution.isValidSudoku(board));
  }

  @Test
  public void test10Row() {
    char[][] board = {{'.','.','.', '.','.','.', '.','.','.'},
                      {'.','.','.', '.','.','.', '.','.','.'},
                      {'.','.','.', '.','.','.', '.','.','.'},
                      
                      {'.','.','.', '.','.','.', '.','.','.'},
                      {'.','.','.', '.','.','.', '.','.','.'},
                      {'.','.','.', '.','.','.', '.','.','.'},
                      
                      {'.','.','.', '.','.','.', '.','.','.'},
                      {'.','.','.', '.','.','.', '.','.','.'},
                      {'.','.','.', '.','.','.', '.','.','.'},
                      
                      {'.','.','.', '.','.','.', '.','.','.'}};
    LeetCode036 solution = new LeetCode036();
    Assert.assertFalse(solution.isValidSudoku(board));
  }

  @Test
  public void testNull() {
    char[][] board = null;
    LeetCode036 solution = new LeetCode036();
    Assert.assertFalse(solution.isValidSudoku(board));
  }
}
